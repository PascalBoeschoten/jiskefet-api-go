// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRunDto create run dto
// swagger:model CreateRunDto
type CreateRunDto struct {

	// The id of the activity.
	// Required: true
	ActivityID *string `json:"activityId"`

	// Amount of bytes read out
	// Required: true
	BytesReadOut *int64 `json:"bytesReadOut"`

	// What builder was used.
	// Required: true
	BytesTimeframeBuilder *int64 `json:"bytesTimeframeBuilder"`

	// Number of detectors during run.
	// Required: true
	NDetectors *int64 `json:"nDetectors"`

	// Number of EPNs that stored data
	// Required: true
	NEpns *int64 `json:"nEpns"`

	// Number of FLPs that computed data
	// Required: true
	NFlps *int64 `json:"nFlps"`

	// Number of subtimeframes
	// Required: true
	NSubtimeframes *int64 `json:"nSubtimeframes"`

	// Number of timeframes
	// Required: true
	NTimeframes *int64 `json:"nTimeframes"`

	// The quality of the run.
	// Required: true
	RunQuality *string `json:"runQuality"`

	// What kind of run.
	// Required: true
	RunType *string `json:"runType"`

	// Date
	// Required: true
	// Format: date-time
	TimeO2End Date `json:"timeO2End"`

	// Date
	// Required: true
	// Format: date-time
	TimeO2Start Date `json:"timeO2Start"`

	// Date
	// Required: true
	// Format: date-time
	TimeTrgEnd Date `json:"timeTrgEnd"`

	// Date
	// Required: true
	// Format: date-time
	TimeTrgStart Date `json:"timeTrgStart"`
}

// Validate validates this create run dto
func (m *CreateRunDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesReadOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesTimeframeBuilder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDetectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNEpns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNFlps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSubtimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNTimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeO2End(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeO2Start(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeTrgEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeTrgStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRunDto) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateBytesReadOut(formats strfmt.Registry) error {

	if err := validate.Required("bytesReadOut", "body", m.BytesReadOut); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateBytesTimeframeBuilder(formats strfmt.Registry) error {

	if err := validate.Required("bytesTimeframeBuilder", "body", m.BytesTimeframeBuilder); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNDetectors(formats strfmt.Registry) error {

	if err := validate.Required("nDetectors", "body", m.NDetectors); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNEpns(formats strfmt.Registry) error {

	if err := validate.Required("nEpns", "body", m.NEpns); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNFlps(formats strfmt.Registry) error {

	if err := validate.Required("nFlps", "body", m.NFlps); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNSubtimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nSubtimeframes", "body", m.NSubtimeframes); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNTimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nTimeframes", "body", m.NTimeframes); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateRunQuality(formats strfmt.Registry) error {

	if err := validate.Required("runQuality", "body", m.RunQuality); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("runType", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateTimeO2End(formats strfmt.Registry) error {

	if err := m.TimeO2End.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeO2End")
		}
		return err
	}

	return nil
}

func (m *CreateRunDto) validateTimeO2Start(formats strfmt.Registry) error {

	if err := m.TimeO2Start.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeO2Start")
		}
		return err
	}

	return nil
}

func (m *CreateRunDto) validateTimeTrgEnd(formats strfmt.Registry) error {

	if err := m.TimeTrgEnd.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeTrgEnd")
		}
		return err
	}

	return nil
}

func (m *CreateRunDto) validateTimeTrgStart(formats strfmt.Registry) error {

	if err := m.TimeTrgStart.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeTrgStart")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRunDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRunDto) UnmarshalBinary(b []byte) error {
	var res CreateRunDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
